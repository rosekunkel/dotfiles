* Bootstrapping
** Initialize package.el
We need to initialize package.el before use-package, and we also need it at
compile time to bootstrap use-package.
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (require 'package)
    (package-initialize)
    (setq package-enable-at-startup nil))
#+END_SRC
** Put customizations in their own file
Installing packages modifies custom variables, so we need to move the custom
file very early in initialization.
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq custom-file (locate-user-emacs-file "custom.el"))
    (load custom-file 'no-error))
#+END_SRC
** Add package archives
We need MELPA to install use-package, so we set these up at compile time.
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq package-archives
          '(("gnu" . "https://elpa.gnu.org/packages/")
            ("melpa" . "https://melpa.org/packages/")
            ("marmalade" . "https://marmalade-repo.org/packages/"))))
#+END_SRC
** Bootstrap use-package
Install use-package if needed and require it.
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package))
#+END_SRC
** Load use-package dependencies at runtime
Normally, loading use-package would load these, but since we only load
use-package at compile time, we need to load them ourselves.
#+BEGIN_SRC emacs-lisp
  (require 'diminish)
  (require 'bind-key)
#+END_SRC
* Theme
Set Solarized as the default theme.
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    (load-theme 'solarized-light 'no-confirm))
#+END_SRC
* Native UI
Disable some pieces of the native UI.
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :defer t
    :config
    (scroll-bar-mode -1))

  (use-package tool-bar
    :defer t
    :config
    (tool-bar-mode -1))
#+END_SRC
* Splash screen
Turn off the startup screen.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC
* Window layout
Automatically lay windows out using golden-ratio.
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :ensure t
    :diminish golden-ratio-mode
    :config
    (golden-ratio-mode))
#+END_SRC
* Smartparens
Enable strict mode for Smartparens everywhere, and set up Paredit-like
keybindings.
#+BEGIN_SRC emacs-lisp
  (use-package smartparens-config
    :ensure smartparens
    :demand
    :bind (:map smartparens-mode-map
                ("M-s" . sp-splice-sexp)
                ("M-<up>" . sp-splice-sexp-killing-backward)
                ("M-<down>" . sp-splice-sexp-killing-forward)
                ("M-r" . sp-raise-sexp)
                ("C-<right>" . sp-forward-slurp-sexp)
                ("C-<left>" . sp-forward-barf-sexp)
                ("C-M-<left>" . sp-backward-slurp-sexp)
                ("C-M-<right>" . sp-backward-barf-sexp)
                ("M-S" . sp-split-sexp)
                ("M-J" . sp-join-sexp)
                ("M-R" . sp-rewrap-sexp))
    :config
    (smartparens-global-strict-mode))
#+END_SRC
* Language server protocol
Add a mode for integrating with language servers to provide
completion, go-to-definition, etc.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :defer t)
#+END_SRC
* Rust
** Major mode
Set up rust-mode and have it automatically format files using rustfmt.
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :defer t
    :config
    (setq rust-format-on-save t))
#+END_SRC
** Rust language server integration
Load rust-specific pieces of lsp-mode and load it alongside rust-mode.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-rust
    :ensure t
    :defer t
    :init
    (add-hook 'rust-mode-hook
              (lambda ()
                ;; Somewhat unfortunately, there doesn't seem to be a
                ;; way to autoload lsp-rust, so we have to require it
                ;; manually before we call lsp-mode.
                (require 'lsp-rust)
                (lsp-mode))))
#+END_SRC
* SLIME
Set up the Superior Lisp Interaction Mode for Emacs, using SBCL and
Quicklisp.
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :defer t
    :config
    (load (expand-file-name "~/.local/lib/quicklisp/slime-helper.el"))
    (setq inferior-lisp-program "sbcl")
    (setq slime-contribs '(slime-fancy)))
#+END_SRC
* Version control
Set up Magit.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :defer t)
#+END_SRC
* Backups
I've never once used an Emacs backup file, and I make regular
full-system backups, so I think we can turn them off.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC
* Overwrite selection
Cause the selection to be overwritten by editing commands.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :config
    (delete-selection-mode))
#+END_SRC
* Coq
Proof General isn't set up as a package, so we have to have it
installed locally. We use it to load .v files as Coq.
#+BEGIN_SRC emacs-lisp
  (use-package proof-site
    :load-path "lisp/PG/generic/"
    :mode ("\\.v\\'" . coq-mode)
    :defines proof-splash-enable
    :config
    ;; Hide the splash screen.
    (setq proof-splash-enable nil)

    ;; When the goals or repsonse buffer update, the window layout
    ;; breaks, so we need to resize manually.
    (add-hook 'proof-shell-handle-delayed-output-hook #'golden-ratio))
#+END_SRC
* Haskell
Set up haskell-mode with REPL support.
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :defer t
    :config
    (add-hook 'haskell-mode-hook #'interactive-haskell-mode))
#+END_SRC
* Typopunct-mode
Allow for easy entry of typographical characters.
#+BEGIN_SRC emacs-lisp
  (use-package typopunct
    :ensure t
    :commands (typopunct-mode)
    :functions typopunct-change-language
    :init
    (add-hook 'text-mode-hook #'typopunct-mode)
    :config
    (typopunct-change-language 'english t))
#+END_SRC
* LaTeX input method
Add a LaTeX-style input method for special characters.
#+BEGIN_SRC emacs-lisp
  (use-package latex-input
    :load-path "lisp/")
#+END_SRC
* AucTeX
Use AucTeX instead of the built-in TeX mode.
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex)
#+END_SRC
* Racket
Set up racket-mode for editing Racket files.
#+BEGIN_SRC emacs-lisp
  (use-package racket-mode
    :ensure t
    :defer t)
#+END_SRC
* Helm
Use helm versions of common commands.
#+BEGIN_SRC emacs-lisp
  (use-package helm-config
    :ensure helm
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x C-b" . helm-buffers-list)))
#+END_SRC
